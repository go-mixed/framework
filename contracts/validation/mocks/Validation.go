// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	validation "gopkg.in/go-mixed/framework/contracts/validation"
)

// Validation is an autogenerated mock type for the Validation type
type Validation struct {
	mock.Mock
}

// AddRules provides a mock function with given fields: _a0
func (_m *Validation) AddRules(_a0 []validation.Rule) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]validation.Rule) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Make provides a mock function with given fields: data, rules, options
func (_m *Validation) Make(data interface{}, rules map[string]string, options ...validation.Option) (validation.Validator, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, data, rules)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 validation.Validator
	if rf, ok := ret.Get(0).(func(interface{}, map[string]string, ...validation.Option) validation.Validator); ok {
		r0 = rf(data, rules, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.Validator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, map[string]string, ...validation.Option) error); ok {
		r1 = rf(data, rules, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rules provides a mock function with given fields:
func (_m *Validation) Rules() []validation.Rule {
	ret := _m.Called()

	var r0 []validation.Rule
	if rf, ok := ret.Get(0).(func() []validation.Rule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validation.Rule)
		}
	}

	return r0
}

type mockConstructorTestingTNewValidation interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidation creates a new instance of Validation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidation(t mockConstructorTestingTNewValidation) *Validation {
	mock := &Validation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
