// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	schedule "gopkg.in/go-mixed/framework.v1/contracts/schedule"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

// At provides a mock function with given fields: time
func (_m *Event) At(time string) schedule.Event {
	ret := _m.Called(time)

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Cron provides a mock function with given fields: expression
func (_m *Event) Cron(expression string) schedule.Event {
	ret := _m.Called(expression)

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// Daily provides a mock function with given fields:
func (_m *Event) Daily() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// DailyAt provides a mock function with given fields: time
func (_m *Event) DailyAt(time string) schedule.Event {
	ret := _m.Called(time)

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func(string) schedule.Event); ok {
		r0 = rf(time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// DelayIfStillRunning provides a mock function with given fields:
func (_m *Event) DelayIfStillRunning() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryFifteenMinutes provides a mock function with given fields:
func (_m *Event) EveryFifteenMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryFiveMinutes provides a mock function with given fields:
func (_m *Event) EveryFiveMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryFourHours provides a mock function with given fields:
func (_m *Event) EveryFourHours() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryFourMinutes provides a mock function with given fields:
func (_m *Event) EveryFourMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryMinute provides a mock function with given fields:
func (_m *Event) EveryMinute() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EverySixHours provides a mock function with given fields:
func (_m *Event) EverySixHours() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryTenMinutes provides a mock function with given fields:
func (_m *Event) EveryTenMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryThirtyMinutes provides a mock function with given fields:
func (_m *Event) EveryThirtyMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryThreeHours provides a mock function with given fields:
func (_m *Event) EveryThreeHours() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryThreeMinutes provides a mock function with given fields:
func (_m *Event) EveryThreeMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryTwoHours provides a mock function with given fields:
func (_m *Event) EveryTwoHours() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// EveryTwoMinutes provides a mock function with given fields:
func (_m *Event) EveryTwoMinutes() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// GetCallback provides a mock function with given fields:
func (_m *Event) GetCallback() func() {
	ret := _m.Called()

	var r0 func()
	if rf, ok := ret.Get(0).(func() func()); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	return r0
}

// GetCommand provides a mock function with given fields:
func (_m *Event) GetCommand() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCron provides a mock function with given fields:
func (_m *Event) GetCron() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDelayIfStillRunning provides a mock function with given fields:
func (_m *Event) GetDelayIfStillRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSkipIfStillRunning provides a mock function with given fields:
func (_m *Event) GetSkipIfStillRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hourly provides a mock function with given fields:
func (_m *Event) Hourly() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// HourlyAt provides a mock function with given fields: offset
func (_m *Event) HourlyAt(offset []string) schedule.Event {
	ret := _m.Called(offset)

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func([]string) schedule.Event); ok {
		r0 = rf(offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

// SkipIfStillRunning provides a mock function with given fields:
func (_m *Event) SkipIfStillRunning() schedule.Event {
	ret := _m.Called()

	var r0 schedule.Event
	if rf, ok := ret.Get(0).(func() schedule.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedule.Event)
		}
	}

	return r0
}

type mockConstructorTestingTNewEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvent(t mockConstructorTestingTNewEvent) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
